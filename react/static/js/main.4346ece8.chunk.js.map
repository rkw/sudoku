{"version":3,"sources":["components/Stats.js","components/Controls.js","components/Box.js","components/Guess.js","components/Board.js","App.js","index.js"],"names":["Stats","started","done","guessed","remaining","id","Controls","defaultValue","this","props","difficulty","onChange","changeDifficultyHandler","value","type","onClick","startGameHandler","solveGameHandler","href","title","React","Component","Box","cell","guess","showing","showGuessHandler","style","className","Guess","possible","guessHandler","possibleView","map","v","i","key","Board","state","data","solveGame","boxes","groups","bind","reportStats","checkWin","e","target","setState","filter","box","length","statsHandler","group","Set","Boolean","size","winHandler","showGuess","clickable","poss","curr","indexOf","nextProps","prevState","updatedState","repeat","forEach","knowns","setPossible","BoxDetail","push","arr","k","j","App","totalClicks","startGame","changeDifficulty","updateStats","gameWon","fetch","then","res","json","result","error","console","log","window","confirm","changeDiffcultyHandler","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4346ece8.chunk.js","sourcesContent":["import React from 'react';\nimport './Stats.css';\n\nfunction Stats({started, done, guessed, remaining}) {\n  if (started)\n    return (\n      <div id='stats'>\n        <span>{done} boxes done.</span>\n        <span>{guessed} boxes guessed.</span>\n        <span>{remaining} boxes remaining.</span>\n      </div>\n    )\n  else\n    return <div id='stats'></div>\n}\n\nexport default Stats;","import React from 'react';\nimport './Controls.css';\n\nclass Controls extends React.Component {\n  render() {\n    return (\n      <div id='controls'>\n        <select id='difficulty' defaultValue={this.props.difficulty} onChange={this.props.changeDifficultyHandler}>\n          <option value='1'>Easy</option>\n          <option value='2'>Medium</option>\n          <option value='3'>Hard</option>\n          <option value='4'>Evil</option>\n        </select>\n        <input id='startgame' type='button' value='Start Game' onClick={this.props.startGameHandler} />\n        <input id='solvegame' type='button' value='Solve Knowns' onClick={this.props.solveGameHandler} />\n        Sudoku Grids From: <a href='http://www.websudoku.com/' title='Web Sudoku'>Web Sudoku</a>\n      </div>\n    )\n  }\n}\n\nexport default Controls;","import React from 'react';\nimport './Box.css';\n\n\nfunction Box({cell, value, guess, showing, showGuessHandler}) {\n  let style = `box inline ${value ? \"done\" : \"\"} ${guess ? \"guessed\" : \"\"}\n    ${showing === cell ? \"showing\" : \"\"} ${((cell + 1) % 3 === 0) ? \"gapRight\" : \"\"} \n    ${(cell >= 18 && cell < 27) || (cell >= 45 && cell < 54) ? \"gapBottom\" : \"\"}`\n\n  return (\n    <div className={style} onClick={showGuessHandler}>\n      <span className=\"done\">{value}</span>\n      <span className=\"guessed\">{guess}</span>\n    </div>\n  )\n}\n\nexport default Box;\n\n","\nimport React from 'react';\nimport './Guess.css';\n\n\nfunction Guess({ possible, guessHandler }) {\n  let possibleView = possible.map((v,i) => {\n    if (v) \n      return <li key={i} value={i} onClick={guessHandler}>{i}</li>\n    else\n      return null\n  }, this)\n\n  return (\n    <ul className=\"guesses\">\n      {possibleView}\n      <li key={0} value='0' onClick={guessHandler}>clear</li>\n    </ul>\n  )\n}\n\nexport default Guess;","import React from 'react'\nimport Box from './Box'\nimport Guess from './Guess'\nimport './Board.css'\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: this.props.data,\n      solveGame: this.props.solveGame,\n      boxes: [],\n      groups: [],\n      showing: -1\n    }\n    this.guess = this.guess.bind(this)\n    this.reportStats = this.reportStats.bind(this)\n    this.checkWin = this.checkWin.bind(this)\n  }\n\n  guess(e) {\n    let boxes = this.state.boxes\n    boxes[this.state.showing].guess = e.target.value\n    this.setState({ boxes: boxes, showing: -1 })\n    this.reportStats()\n    this.checkWin()\n  }\n\n  getPossible(cell) {\n    return this.state.boxes[cell].possible\n  }\n\n  reportStats() {\n    let done = this.state.boxes.filter((box) => box.value > 0).length\n    let guessed = this.state.boxes.filter((box) => box.guess > 0).length\n    let remaining = 81 - done\n    this.props.statsHandler({ done, guessed, remaining })\n  }\n\n  checkWin() {\n    for (let i=0; i<this.state.groups.length; i++) {\n      let group = this.state.groups[i]\n      let values = new Set(group.map((box) => box.value || box.guess ).filter(Boolean))\n      if (values.size < 9) return false\n    }\n    this.props.winHandler()\n  }\n\n  static setPossible(box, poss) {\n    let curr = box.possible\n\n    for (let i = 0; i < poss.length; i++) {\n      curr[i] = curr[i] & poss[i]\n    }\n\n    if (curr.filter(Boolean).length === 1) {\n      box.value = curr.indexOf(1)\n      box.possible = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    } else {\n      box.possible = curr\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    let updatedState = null\n\n    // solve game if prompted\n    // BUG: if someone loads a new game and solves it in the same cycle\n    if (nextProps.solveGame !== prevState.solveGame) {\n      if (nextProps.solveGame) {\n        let groups = prevState.groups\n        let repeat = true\n\n        while (repeat) {\n          // repeat until no reductions are possible\n          repeat = false\n\n          // eslint-disable-next-line \n          groups.forEach(group => {\n            let knowns = group.map((box) => box.value).filter(Boolean)\n            let poss = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\n            for (let i in knowns) {\n              poss[knowns[i]] = 0;\n            }\n\n            group.forEach((box) => {\n              if (box.value === 0) {\n                Board.setPossible(box, poss)\n                if (box.value !== 0) repeat = true\n              }\n            })\n          })\n        }\n\n        updatedState = { groups: groups, solveGame: nextProps.solveGame, ...updatedState }\n      } else {\n\n        updatedState = { solveGame: nextProps.solveGame, ...updatedState}\n      }\n    }\n\n    // reset state when new data is loaded\n    if (nextProps.data !== prevState.data) {\n      let boxes = []\n      let groups = []\n\n      // Set all 81 boxes\n      for (let i = 0; i < 81; i++) {\n        let box = new BoxDetail(nextProps.data[i], i)\n        boxes.push(box)\n      }\n\n      // Create 27 groups: 9 horizotal rows, 9 vertical rows, 9 sections\n      for (let i = 0; i < 27; i++) {\n        groups[i] = []\n      }\n\n      let arr = []   //.. hold box indexes for the groups\n\n      // Indexes for horizontal rows\n      for (let i = 0; i < 9; i++) {\n        let k = 9 * i\n        arr[i] = [0 + k, 1 + k, 2 + k, 3 + k, 4 + k, 5 + k, 6 + k, 7 + k, 8 + k]\n      }\n\n      // Indexes for vertical rows\n      for (var i = 0; i < 9; i++) {\n        let k = i\n        arr[i + 9] = [0 + k, 9 + k, 18 + k, 27 + k, 36 + k, 45 + k, 54 + k, 63 + k, 72 + k]\n      }\n\n      // Indexes for sections\n      for (let i = 18; i < 27; i++) {\n        arr[i] = []\n      }\n      for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < 3; j++) {\n          arr[18].push((0 + j) + (i * 9))\n          arr[19].push((3 + j) + (i * 9))\n          arr[20].push((6 + j) + (i * 9))\n          arr[21].push((27 + j) + (i * 9))\n          arr[22].push((30 + j) + (i * 9))\n          arr[23].push((33 + j) + (i * 9))\n          arr[24].push((54 + j) + (i * 9))\n          arr[25].push((57 + j) + (i * 9))\n          arr[26].push((60 + j) + (i * 9))\n        }\n      }\n\n      // Add boxes to groups\n      for (let i in groups) {\n        for (let j in arr[i]) {\n          groups[i].push(boxes[arr[i][j]])\n        }\n      }\n\n      updatedState = { boxes: boxes, groups: groups, data: nextProps.data, ...updatedState }\n    }\n\n    return updatedState\n  }\n\n  render() {\n    let boxes\n    if (this.state.boxes.length) {\n      boxes = this.state.boxes.map(({ cell, value, guess }) => {\n        // prevent click if a sure value already exists\n        let clickable = value ? null : (e) => this.setState({ showing: cell })\n\n        return <Box key={cell} value={value} guess={guess} cell={cell} showing={this.state.showing}\n          showGuessHandler={clickable}>\n        </Box>\n      })\n    }\n\n    let showGuess\n    if (this.state.showing > -1) {\n      showGuess = <Guess guessHandler={this.guess}\n        possible={this.state.boxes[this.state.showing].possible}>\n      </Guess>\n    }\n\n    //bring in redux .. this.reportStats() \n\n    return (\n      <div>\n        <div id=\"board\">{boxes}</div>\n        <div id=\"guesses\">{showGuess}</div>\n      </div>\n    )\n  }\n}\n\nclass BoxDetail {\n  constructor(value, cell) {\n    this.value = value    //.. known value for cell\n    this.guess = 0        //.. users guess\n    this.cell = cell      //.. 0 to 80, going across\n    this.possible = (value === 0)\n      ? [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]    //.. value can never be zero\n      : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]    //.. if a value is set, nothing is possible\n  }\n}\n\nexport default Board;\n\n","import React from 'react';\nimport './App.css';\nimport Stats from './components/Stats';\nimport Controls from './components/Controls';\nimport Board from './components/Board';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      done: 0,\n      guessed: 0,\n      remaining: 81,\n      totalClicks: 0,\n      solveGame: false,\n      started: false,\n      difficulty: 2,\n      data: []\n    }\n    this.startGame = this.startGame.bind(this)\n    this.changeDifficulty = this.changeDifficulty.bind(this)\n    this.updateStats = this.updateStats.bind(this)\n    this.gameWon = this.gameWon.bind(this)\n  }\n\n  startGame() {\n    // let data = [\n    //   4, 0, 0, 0, 0, 0, 0, 5, 9,\n    //   3, 0, 0, 0, 5, 0, 6, 0, 4,\n    //   0, 1, 0, 0, 0, 8, 0, 0, 0,\n    //   7, 0, 0, 8, 0, 3, 0, 6, 0,\n    //   0, 0, 0, 0, 0, 0, 0, 0, 0,\n    //   0, 5, 0, 9, 0, 4, 0, 0, 7,\n    //   0, 0, 0, 3, 0, 0, 0, 2, 0,\n    //   2, 0, 6, 0, 8, 0, 0, 0, 3,\n    //   9, 7, 0, 0, 0, 0, 0, 0, 8\n    // ];\n    let data = [\n      3, 6, 7, 8, 9, 0, 5, 4, 2, \n      2, 8, 1, 3, 4, 5, 7, 6, 9, \n      5, 4, 9, 6, 2, 7, 0, 3, 8, \n      6, 2, 3, 7, 1, 4, 8, 9, 5, \n      7, 5, 8, 9, 3, 2, 4, 1, 6, \n      9, 1, 4, 5, 6, 8, 2, 7, 3, \n      4, 3, 2, 1, 5, 9, 6, 8, 7, \n      1, 7, 6, 2, 8, 3, 9, 5, 4, \n      8, 9, 5, 4, 7, 6, 3, 2, 0\n    ]\n\n    fetch(`sudoku-data?level=${this.state.difficulty}`)\n      .then(res => res.json())\n      .then(\n        (result) => { data = result },\n        (error) => { console.log(error) }\n      )\n      .then(\n        () => {\n          this.setState({ started: true, solveGame: false, totalClicks: 0, done: 0, guessed: 0, remaining: 81, data: data })\n        }\n      )\n  }\n\n  changeDifficulty({value}) {\n    this.setState({ difficulty: value })\n    this.startGame()\n  }\n\n  updateStats({ done, guessed, remaining }) {\n    let totalClicks = this.state.totalClicks + 1\n    this.setState({ done, guessed, remaining, totalClicks })\n  }\n\n  gameWon() {\n    if (window.confirm(`Congratulations!\\nYou solved it in ${this.state.totalClicks} clicks.\\n\\nContinue to new game?`))\n      this.startGame()\n  }\n\n  render() {\n    let totalClicks\n    if (this.state.started) totalClicks = <div id='totalclicks' className='inline'>Total moves: {this.state.totalClicks}</div>\n\n    return (\n      <div>\n        <div id='title' className='inline'>\n          <h1>Sudoku Solver / Helper</h1>\n        </div>\n\n        {totalClicks}\n\n        <Controls difficulty={this.state.difficulty}\n          startGameHandler={this.startGame}\n          changeDiffcultyHandler={this.changeDifficulty}\n          solveGameHandler={() => this.setState({ solveGame: true })}>\n        </Controls>\n\n        <Board data={this.state.data} solveGame={this.state.solveGame} \n          statsHandler={this.updateStats} winHandler={this.gameWon}>\n        </Board>\n\n        <Stats started={this.state.started} done={this.state.done}\n          guessed={this.state.guessed} remaining={this.state.remaining}>\n        </Stats>\n      </div >\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
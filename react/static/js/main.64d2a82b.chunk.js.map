{"version":3,"sources":["components/Stats.js","components/Controls.js","components/Box.js","components/Guess.js","components/Board.js","App.js","index.js"],"names":["Stats","started","done","guessed","remaining","id","Controls","difficulty","changeDifficultyHandler","startGameHandler","solveGameHandler","defaultValue","onChange","value","type","onClick","href","title","Box","cell","guess","showing","showGuessHandler","style","className","Guess","possible","guessHandler","possibleView","map","v","i","key","this","BoxDetail","Board","renderBoxes","renderGuess","data","solveGame","statsHandler","winHandler","useState","boxes","setBoxes","groups","setGroups","setShowing","boardData","setBoardData","gameSolved","setGameSolved","reportStats","filter","box","length","checkWin","group","Set","Boolean","size","setPossible","poss","curr","indexOf","push","arr","k","j","loadData","repeat","forEach","knowns","findKnownAnswers","clickable","e","target","App","renderClicks","totalClicks","stats","setStats","settings","setSettings","gameData","setGameData","startGame","a","fetch","then","res","json","result","error","console","log","changeDiffcultyHandler","window","confirm","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.64d2a82b.chunk.js","sourcesContent":["import React from 'react';\nimport './Stats.css';\n\nfunction Stats({started, done, guessed, remaining}) {\n  if (started)\n    return (\n      <div id='stats'>\n        <span>{done} boxes done.</span>\n        <span>{guessed} boxes guessed.</span>\n        <span>{remaining} boxes remaining.</span>\n      </div>\n    )\n  else\n    return <div id='stats'></div>\n}\n\nexport default Stats;","import React from 'react';\nimport './Controls.css';\n\nfunction Controls({difficulty, changeDifficultyHandler, startGameHandler, solveGameHandler}) {\n  return (\n    <div id='controls'>\n      <select id='difficulty' defaultValue={difficulty} onChange={changeDifficultyHandler}>\n        <option value='1'>Easy</option>\n        <option value='2'>Medium</option>\n        <option value='3'>Hard</option>\n        <option value='4'>Evil</option>\n      </select>\n      <input id='startgame' type='button' value='Start Game' onClick={startGameHandler} />\n      <input id='solvegame' type='button' value='Solve Knowns' onClick={solveGameHandler} />\n      Sudoku Grids From: <a href='http://www.websudoku.com/' title='Web Sudoku'>Web Sudoku</a>\n    </div>\n  )\n}\n\nexport default Controls;","import React from 'react';\nimport './Box.css';\n\n\nfunction Box({cell, value, guess, showing, showGuessHandler}) {\n  let style = `box inline ${value ? \"done\" : \"\"} ${guess ? \"guessed\" : \"\"}\n    ${showing === cell ? \"showing\" : \"\"} ${((cell + 1) % 3 === 0) ? \"gapRight\" : \"\"} \n    ${(cell >= 18 && cell < 27) || (cell >= 45 && cell < 54) ? \"gapBottom\" : \"\"}`\n\n  return (\n    <div className={style} onClick={showGuessHandler}>\n      <span className=\"done\">{value}</span>\n      <span className=\"guessed\">{guess}</span>\n    </div>\n  )\n}\n\nexport default Box;\n\n","\nimport React from 'react';\nimport './Guess.css';\n\n\nfunction Guess({ possible, guessHandler }) {\n  let possibleView = possible.map((v,i) => {\n    if (v) \n      return <li key={i} value={i} onClick={guessHandler}>{i}</li>\n    else\n      return null\n  }, this)\n\n  return (\n    <ul className=\"guesses\">\n      {possibleView}\n      <li key={0} value='0' onClick={guessHandler}>clear</li>\n    </ul>\n  )\n}\n\nexport default Guess;","import React, { useState } from 'react'\nimport Box from './Box'\nimport Guess from './Guess'\nimport './Board.css'\n\nfunction Board({ data, solveGame, statsHandler, winHandler }) {\n  const [boxes, setBoxes] = useState([])\n  const [groups, setGroups] = useState([])\n\n  const [showing, setShowing] = useState(-1)\n  const [boardData, setBoardData] = useState([])\n  const [gameSolved, setGameSolved] = useState(false)\n\n  const setGuess = (e) => {\n    boxes[showing].guess = e.target.value\n    setBoxes(boxes)\n    setShowing(-1)\n    reportStats()\n    checkWin()\n  }\n\n  const reportStats = () => {\n    let done = boxes.filter((box) => box.value > 0).length\n    let guessed = boxes.filter((box) => box.guess > 0).length\n    let remaining = 81 - done\n    statsHandler({ done, guessed, remaining })\n  }\n\n  const checkWin = () => {\n    for (let i = 0; i < groups.length; i++) {\n      let group = groups[i]\n      let values = new Set(group.map((box) => box.value || box.guess).filter(Boolean))\n      if (values.size < 9) return false\n    }\n    winHandler()\n  }\n\n  const setPossible = (box, poss) => {\n    let curr = box.possible\n\n    for (let i = 0; i < poss.length; i++) {\n      curr[i] = curr[i] & poss[i]\n    }\n\n    if (curr.filter(Boolean).length === 1) {\n      box.value = curr.indexOf(1)\n      box.possible = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    } else {\n      box.possible = curr\n    }\n  }\n\n  const findKnownAnswers = () => {\n    let repeat = true\n\n    while (repeat) {\n      // repeat until no reductions are possible\n      repeat = false\n\n      // eslint-disable-next-line \n      groups.forEach(group => {\n        let knowns = group.map((box) => box.value).filter(Boolean)\n        let poss = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n\n        for (let i in knowns) {\n          poss[knowns[i]] = 0;\n        }\n\n        group.forEach((box) => {\n          if (box.value === 0) {\n            setPossible(box, poss)\n            if (box.value !== 0) repeat = true\n          }\n        })\n      })\n    }\n\n    setGroups(groups)\n    setGameSolved(true)\n  }\n\n  const loadData = (data) => {\n    let boxes = []\n    let groups = []\n\n    // Set all 81 boxes\n    for (let i = 0; i < 81; i++) {\n      let box = new BoxDetail(data[i], i)\n      boxes.push(box)\n    }\n\n    // Create 27 groups: 9 horizotal rows, 9 vertical rows, 9 sections\n    for (let i = 0; i < 27; i++) {\n      groups[i] = []\n    }\n\n    let arr = []   //.. hold box indexes for the groups\n\n    // Indexes for horizontal rows\n    for (let i = 0; i < 9; i++) {\n      let k = 9 * i\n      arr[i] = [0 + k, 1 + k, 2 + k, 3 + k, 4 + k, 5 + k, 6 + k, 7 + k, 8 + k]\n    }\n\n    // Indexes for vertical rows\n    for (var i = 0; i < 9; i++) {\n      let k = i\n      arr[i + 9] = [0 + k, 9 + k, 18 + k, 27 + k, 36 + k, 45 + k, 54 + k, 63 + k, 72 + k]\n    }\n\n    // Indexes for sections\n    for (let i = 18; i < 27; i++) {\n      arr[i] = []\n    }\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        arr[18].push((0 + j) + (i * 9))\n        arr[19].push((3 + j) + (i * 9))\n        arr[20].push((6 + j) + (i * 9))\n        arr[21].push((27 + j) + (i * 9))\n        arr[22].push((30 + j) + (i * 9))\n        arr[23].push((33 + j) + (i * 9))\n        arr[24].push((54 + j) + (i * 9))\n        arr[25].push((57 + j) + (i * 9))\n        arr[26].push((60 + j) + (i * 9))\n      }\n    }\n\n    // Add boxes to groups\n    for (let i in groups) {\n      for (let j in arr[i]) {\n        groups[i].push(boxes[arr[i][j]])\n      }\n    }\n\n    setBoxes(boxes)\n    setGroups(groups)\n    setBoardData(data)\n    setGameSolved(false)\n  }\n\n  if (data.length > 0 && boardData !== data) loadData(data)\n  if (solveGame && !gameSolved) findKnownAnswers()\n\n  let renderBoxes\n  if (boxes.length) {\n    renderBoxes = boxes.map(({ cell, value, guess }) => {\n      // prevent click if a sure value already exists\n      let clickable = value ? null : (e) => setShowing(cell)\n\n      return <Box key={cell} value={value} guess={guess} cell={cell} showing={showing}\n        showGuessHandler={clickable}>\n      </Box>\n    })\n  }\n\n  let renderGuess\n  if (showing > -1) {\n    renderGuess = <Guess guessHandler={setGuess}\n      possible={boxes[showing].possible}>\n    </Guess>\n  }\n\n  return (\n    <div>\n      <div id=\"board\">{renderBoxes}</div>\n      <div id=\"guesses\">{renderGuess}</div>\n    </div>\n  )\n\n}\n\nclass BoxDetail {\n  constructor(value, cell) {\n    this.value = value    //.. known value for cell\n    this.guess = 0        //.. users guess\n    this.cell = cell      //.. 0 to 80, going across\n    this.possible = (value === 0)\n      ? [0, 1, 1, 1, 1, 1, 1, 1, 1, 1]    //.. value can never be zero\n      : [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]    //.. if a value is set, nothing is possible\n  }\n}\n\nexport default Board;\n\n","import React, { useState } from 'react'\nimport './App.css';\nimport Stats from './components/Stats';\nimport Controls from './components/Controls';\nimport Board from './components/Board';\n\nfunction App() {\n  const [stats, setStats] = useState({ done: 0, guess: 0, remaining: 81, totalClicks: 0 })\n  const [settings, setSettings] = useState({ solveGame: false, started: false, difficulty: 2 })\n  const [gameData, setGameData] = useState([])\n\n  const startGame = async () => {\n    // let data = [\n    //   4, 0, 0, 0, 0, 0, 0, 5, 9,\n    //   3, 0, 0, 0, 5, 0, 6, 0, 4,\n    //   0, 1, 0, 0, 0, 8, 0, 0, 0,\n    //   7, 0, 0, 8, 0, 3, 0, 6, 0,\n    //   0, 0, 0, 0, 0, 0, 0, 0, 0,\n    //   0, 5, 0, 9, 0, 4, 0, 0, 7,\n    //   0, 0, 0, 3, 0, 0, 0, 2, 0,\n    //   2, 0, 6, 0, 8, 0, 0, 0, 3,\n    //   9, 7, 0, 0, 0, 0, 0, 0, 8\n    // ];\n    let data = [\n      3, 6, 7, 8, 9, 0, 5, 4, 2,\n      2, 8, 1, 3, 4, 5, 7, 6, 9,\n      5, 4, 9, 6, 2, 7, 0, 3, 8,\n      6, 2, 3, 7, 1, 4, 8, 9, 5,\n      7, 5, 8, 9, 3, 2, 4, 1, 6,\n      9, 1, 4, 5, 6, 8, 2, 7, 3,\n      4, 3, 2, 1, 5, 9, 6, 8, 7,\n      1, 7, 6, 2, 8, 3, 9, 5, 4,\n      8, 9, 5, 4, 7, 6, 3, 2, 0\n    ]\n\n    await fetch(`sudoku-data?level=${settings.difficulty}`)\n      .then(res => res.json())\n      .then(\n        (result) => { data = result },\n        (error) => { console.log(error) }\n      )\n\n    setStats({ ...stats, totalClicks: 0, done: 0, guessed: 0, remaining: 81 })\n    setSettings({ ...settings, started: true, solveGame: false })\n    setGameData(data)\n  }\n\n  const changeDifficulty = ({ value }) => {\n    setSettings({ ...settings, difficulty: value })\n    startGame()\n  }\n\n  const updateStats = ({ done, guessed, remaining }) => {\n    let totalClicks = stats.totalClicks + 1\n    setStats({ done, guessed, remaining, totalClicks })\n  }\n\n  const gameWon = () => {\n    if (window.confirm(`Congratulations!\\nYou solved it in ${stats.totalClicks} clicks.\\n\\nContinue to new game?`))\n      startGame()\n  }\n\n  let renderClicks\n  if (settings.started) renderClicks = <div id='totalclicks' className='inline'>Total moves: {stats.totalClicks}</div>\n\n  return (\n    <div>\n      <div id='title' className='inline'>\n        <h1>Sudoku Solver / Helper</h1>\n      </div>\n\n      {renderClicks}\n\n      <Controls difficulty={settings.difficulty}\n        startGameHandler={startGame}\n        changeDiffcultyHandler={changeDifficulty}\n        solveGameHandler={() => setSettings({ ...settings, solveGame: true })}>\n      </Controls>\n\n      <Board data={gameData} solveGame={settings.solveGame}\n        statsHandler={updateStats} winHandler={gameWon}>\n      </Board>\n\n      <Stats started={settings.started} done={stats.done}\n        guessed={stats.guessed} remaining={stats.remaining}>\n      </Stats>\n    </div >\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}